% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BayesNMR.R
\name{bayes.nmr}
\alias{bayes.nmr}
\title{Fit Bayesian Network Meta-Regression Hierarchical Models Using Heavy-Tailed Multivariate Random Effects with Covariate-Dependent Variances}
\usage{
bayes.nmr(
  Outcome,
  SD,
  Covariate,
  Trial,
  Treat,
  Npt,
  groupInfo,
  prior = list(),
  mcmc = list(),
  scale_x = FALSE,
  add.z = NULL,
  control = list(),
  init = list(),
  Treat_order = NULL,
  Trial_order = NULL,
  verbose = FALSE
)
}
\arguments{
\item{Outcome}{aggregate mean of the responses for each arm of each study}

\item{SD}{standard deviation of the responses for each arm of each study}

\item{Covariate}{aggregate covariates for the mean component}

\item{Trial}{study/trial identifiers; will be coerced to consecutive integers}

\item{Treat}{treatment identifiers for the corresponding trial arm; equivalent to the arm number of each study; will be coerced to consecutive integers}

\item{Npt}{number of observations/participants per trial}

\item{groupInfo}{list of grouping information; the control(baseline) group must start from 0; the aggregate covariates 'z' explaining the variance of the random effect of the t-th treatment will be construct based on this grouping information}

\item{prior}{(Optional) list of hyperparameters when not given, algorithm will run in default setting.}

\item{mcmc}{(Optional) list of MCMC-related parameters: number of burn-ins (ndiscard), number of thinning(nskip), and posterior sample size (nkeep)}

\item{scale_x}{(Optional) a logical variable whether `Covariate` should be scaled; if `TRUE`, `theta` will be scaled back to its original scale after posterior sampling}

\item{add.z}{(Optional) additional covariates other than the grouping vectors that should be column-concatenated to 'Z'. This should have the same number of rows as 'Outcome', and 'Covariate'}

\item{control}{(Optional) list of parameters for localized Metropolis algorithm: the step sizes for lambda, phi, and Rho (lambda_stepsize, phi_stepsize, Rho_stepsize); All default to 0.5 except Rho_stepsize if not set; Rho_stepsize defaults to 0.2; sample_Rho is a logical value, by default TRUE; if sample_Rho=FALSE, MCMC sampling of Rho is suppressed; if sample_df is set to TRUE, the degrees of freedom for the t random effects will be treated as unknown and sampled in the MCMC algorithm}

\item{init}{(Optional) initial values for theta (ns + nT dimensional) and phi. Dimensions must be conformant.}

\item{Treat_order}{(Optional) a vector of unique treatments to be used for renumbering the 'Treat' vector; the first element will be assigned treatment zero, potentially indicating placebo; if not provided, the numbering will default to an alphabetical/numerical order}

\item{Trial_order}{(Optional) a vector of unique trials; the first element will be assigned trial zero; if not provided, the numbering will default to an alphabetical/numerical order}

\item{verbose}{(Optional) logical variable for printing progress bar. Default to FALSE.}
}
\value{
a dataframe with input arguments, posterior samples, Metropolis algorithm acceptance rates, etc
}
\description{
This is a function for running the Markov chain Monte Carlo algorithm for the BNMHHtMRe Model. The first seven arguments are required.
}
\examples{
\dontrun{
data(TNM)
groupInfo <- list(c(0, 1), c(2, 3), c(4)) # define the variance structure
x <- TNM[, 6:15]
x <- scale(x, center = TRUE, scale = TRUE)
beta_init <- c(0.05113, -1.38866, 1.09817, -0.85855, -1.12056, -1.14133, -0.22435, 3.63453,
             -2.09322, 1.07858, 0.80566, -40.76753, -45.07127, -28.27232, -44.14054,
             -28.13203, -19.19989, -47.21824, -51.31234, -48.46266, -47.71443)
fit <- bayes.nmr(TNM$ptg, TNM$sdtg, x, TNM$Trial, TNM$Treat, TNM$Npt, groupInfo,
  add.z = cbind(TNM$bldlc, TNM$btg),
  prior = list(c01 = 1.0e05, c02 = 4, df = 3),
  mcmc = list(ndiscard = 2500, nskip = 1, nkeep = 10000),
  init = list(beta = beta_init),
  Treat_order = c("PBO", "S", "A", "L", "R", "P", "E", "SE", "AE", "LE", "PE"),
  verbose = TRUE
)
}
}
\author{
Daeyoung Lim, \email{daeyoung.lim@uconn.edu}
}
