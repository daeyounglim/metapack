// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// BMVMR_POCov
Rcpp::List BMVMR_POCov(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& d0, const double& s0, const double& nu0, const double& a0, const double& b0, const arma::mat& Omega0, const arma::mat& Sigma0, const int& K, const int& T, const int& fmodel, const int& ndiscard, const int& nskip, const int& nkeep, const double& R_stepsize, const double& Rho_stepsize, const double& delta_stepsize, const int& delta_rep, const int& rho_rep, const bool& verbose);
RcppExport SEXP _metapack_BMVMR_POCov(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP d0SEXP, SEXP s0SEXP, SEXP nu0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP Omega0SEXP, SEXP Sigma0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP fmodelSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP R_stepsizeSEXP, SEXP Rho_stepsizeSEXP, SEXP delta_stepsizeSEXP, SEXP delta_repSEXP, SEXP rho_repSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< const double& >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< const double& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type fmodel(fmodelSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Rho_stepsize(Rho_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_stepsize(delta_stepsizeSEXP);
    Rcpp::traits::input_parameter< const int& >::type delta_rep(delta_repSEXP);
    Rcpp::traits::input_parameter< const int& >::type rho_rep(rho_repSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BMVMR_POCov(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, d0, s0, nu0, a0, b0, Omega0, Sigma0, K, T, fmodel, ndiscard, nskip, nkeep, R_stepsize, Rho_stepsize, delta_stepsize, delta_rep, rho_rep, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BMVMR_POCovHMC
Rcpp::List BMVMR_POCovHMC(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& d0, const double& s0, const double& nu0, const double& a0, const double& b0, const arma::mat& Omega0, const arma::mat& Sigma0, const int& K, const int& T, const int& fmodel, const int& ndiscard, const int& nskip, const int& nkeep, const double& R_stepsize, const double& Rho_stepsize, const double& delta_stepsize, const int& delta_rep, const int& L_HMC, const double& eps_HMC, const bool& verbose);
RcppExport SEXP _metapack_BMVMR_POCovHMC(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP d0SEXP, SEXP s0SEXP, SEXP nu0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP Omega0SEXP, SEXP Sigma0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP fmodelSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP R_stepsizeSEXP, SEXP Rho_stepsizeSEXP, SEXP delta_stepsizeSEXP, SEXP delta_repSEXP, SEXP L_HMCSEXP, SEXP eps_HMCSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< const double& >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< const double& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type fmodel(fmodelSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Rho_stepsize(Rho_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_stepsize(delta_stepsizeSEXP);
    Rcpp::traits::input_parameter< const int& >::type delta_rep(delta_repSEXP);
    Rcpp::traits::input_parameter< const int& >::type L_HMC(L_HMCSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_HMC(eps_HMCSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BMVMR_POCovHMC(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, d0, s0, nu0, a0, b0, Omega0, Sigma0, K, T, fmodel, ndiscard, nskip, nkeep, R_stepsize, Rho_stepsize, delta_stepsize, delta_rep, L_HMC, eps_HMC, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesNMR
Rcpp::List BayesNMR(const arma::vec& y, const arma::vec& sd, const arma::mat& x, const arma::mat& z, const arma::uvec& ids, const arma::uvec& iarm, const arma::vec& npt, const double& nu, const double& c01_inv, const double& c02_inv, const int& K, const int& nT, const int& ndiscard, const int& nskip, const int& nkeep, const bool verbose, const arma::vec& beta_init, const arma::vec& phi_init, const arma::vec& sig2_init);
RcppExport SEXP _metapack_BayesNMR(SEXP ySEXP, SEXP sdSEXP, SEXP xSEXP, SEXP zSEXP, SEXP idsSEXP, SEXP iarmSEXP, SEXP nptSEXP, SEXP nuSEXP, SEXP c01_invSEXP, SEXP c02_invSEXP, SEXP KSEXP, SEXP nTSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP verboseSEXP, SEXP beta_initSEXP, SEXP phi_initSEXP, SEXP sig2_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type iarm(iarmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type c01_inv(c01_invSEXP);
    Rcpp::traits::input_parameter< const double& >::type c02_inv(c02_invSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi_init(phi_initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sig2_init(sig2_initSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesNMR(y, sd, x, z, ids, iarm, npt, nu, c01_inv, c02_inv, K, nT, ndiscard, nskip, nkeep, verbose, beta_init, phi_init, sig2_init));
    return rcpp_result_gen;
END_RCPP
}
// calc_modelfit_dic
Rcpp::List calc_modelfit_dic(const arma::vec& y, const arma::mat& x, const arma::mat& z, const arma::uvec& ids, const arma::uvec& iarm, const arma::vec& npt, const double& nu, const arma::mat& betas, const arma::mat& sig2s, const arma::mat& phis, const arma::mat& lams, const arma::cube& Rhos, const int& K, const int& nT, const int& nkeep, const bool verbose);
RcppExport SEXP _metapack_calc_modelfit_dic(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP idsSEXP, SEXP iarmSEXP, SEXP nptSEXP, SEXP nuSEXP, SEXP betasSEXP, SEXP sig2sSEXP, SEXP phisSEXP, SEXP lamsSEXP, SEXP RhosSEXP, SEXP KSEXP, SEXP nTSEXP, SEXP nkeepSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type iarm(iarmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig2s(sig2sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phis(phisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lams(lamsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Rhos(RhosSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_modelfit_dic(y, x, z, ids, iarm, npt, nu, betas, sig2s, phis, lams, Rhos, K, nT, nkeep, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel1
Rcpp::List fmodel1(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& a0, const double& b0, const arma::mat& Omega0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const bool& verbose);
RcppExport SEXP _metapack_fmodel1(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP Omega0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel1(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, a0, b0, Omega0, K, T, ndiscard, nskip, nkeep, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel2
Rcpp::List fmodel2(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& s0, const arma::mat& Omega0, const arma::mat& Sigma0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& R_stepsize, const bool& verbose);
RcppExport SEXP _metapack_fmodel2(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP s0SEXP, SEXP Omega0SEXP, SEXP Sigma0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP R_stepsizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel2(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, s0, Omega0, Sigma0, K, T, ndiscard, nskip, nkeep, R_stepsize, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel3
Rcpp::List fmodel3(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& a0, const double& b0, const arma::mat& Omega0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& delta_stepsize, const double& Rho_stepsize, const double& R_stepsize, const bool& verbose);
RcppExport SEXP _metapack_fmodel3(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP Omega0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP delta_stepsizeSEXP, SEXP Rho_stepsizeSEXP, SEXP R_stepsizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_stepsize(delta_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Rho_stepsize(Rho_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel3(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, a0, b0, Omega0, K, T, ndiscard, nskip, nkeep, delta_stepsize, Rho_stepsize, R_stepsize, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel4
Rcpp::List fmodel4(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& d0, const double& nu0, const arma::mat& Sigma0, const arma::mat& Omega0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& delta_stepsize, const double& Rho_stepsize, const double& R_stepsize, const bool& verbose);
RcppExport SEXP _metapack_fmodel4(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP d0SEXP, SEXP nu0SEXP, SEXP Sigma0SEXP, SEXP Omega0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP delta_stepsizeSEXP, SEXP Rho_stepsizeSEXP, SEXP R_stepsizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< const double& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_stepsize(delta_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Rho_stepsize(Rho_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel4(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, d0, nu0, Sigma0, Omega0, K, T, ndiscard, nskip, nkeep, delta_stepsize, Rho_stepsize, R_stepsize, verbose));
    return rcpp_result_gen;
END_RCPP
}
// lpml_parcov
Rcpp::List lpml_parcov(const arma::mat& Outcome, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::vec& Npt, const arma::cube& Sigma, const arma::cube& Omega, const arma::mat& theta, const arma::vec& thetahat, const arma::mat& Sigmahat, const arma::mat& Omegahat, const int& fmodel, const int& nkeep, const bool verbose);
RcppExport SEXP _metapack_lpml_parcov(SEXP OutcomeSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP NptSEXP, SEXP SigmaSEXP, SEXP OmegaSEXP, SEXP thetaSEXP, SEXP thetahatSEXP, SEXP SigmahatSEXP, SEXP OmegahatSEXP, SEXP fmodelSEXP, SEXP nkeepSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetahat(thetahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigmahat(SigmahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omegahat(OmegahatSEXP);
    Rcpp::traits::input_parameter< const int& >::type fmodel(fmodelSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(lpml_parcov(Outcome, XCovariate, WCovariate, Npt, Sigma, Omega, theta, thetahat, Sigmahat, Omegahat, fmodel, nkeep, verbose));
    return rcpp_result_gen;
END_RCPP
}
// dic_parcov
Rcpp::List dic_parcov(const arma::mat& Outcome, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::vec& Npt, const arma::cube& Sigma, const arma::cube& Omega, const arma::mat& theta, const arma::vec& thetahat, const arma::mat& Sigmahat, const arma::mat& Omegahat, const int& fmodel, const int& nkeep, const bool verbose);
RcppExport SEXP _metapack_dic_parcov(SEXP OutcomeSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP NptSEXP, SEXP SigmaSEXP, SEXP OmegaSEXP, SEXP thetaSEXP, SEXP thetahatSEXP, SEXP SigmahatSEXP, SEXP OmegahatSEXP, SEXP fmodelSEXP, SEXP nkeepSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetahat(thetahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigmahat(SigmahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omegahat(OmegahatSEXP);
    Rcpp::traits::input_parameter< const int& >::type fmodel(fmodelSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(dic_parcov(Outcome, XCovariate, WCovariate, Npt, Sigma, Omega, theta, thetahat, Sigmahat, Omegahat, fmodel, nkeep, verbose));
    return rcpp_result_gen;
END_RCPP
}
// calc_modelfit_lpml
Rcpp::List calc_modelfit_lpml(const arma::vec& y, const arma::mat& x, const arma::mat& z, const arma::uvec& ids, const arma::uvec& iarm, const arma::vec& npt, const double& nu, const arma::mat& betas, const arma::mat& sig2s, const arma::mat& phis, const arma::mat& lams, const arma::cube& Rhos, const int& K, const int& nT, const int& nkeep, const bool verbose);
RcppExport SEXP _metapack_calc_modelfit_lpml(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP idsSEXP, SEXP iarmSEXP, SEXP nptSEXP, SEXP nuSEXP, SEXP betasSEXP, SEXP sig2sSEXP, SEXP phisSEXP, SEXP lamsSEXP, SEXP RhosSEXP, SEXP KSEXP, SEXP nTSEXP, SEXP nkeepSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type iarm(iarmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig2s(sig2sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phis(phisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lams(lamsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Rhos(RhosSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_modelfit_lpml(y, x, z, ids, iarm, npt, nu, betas, sig2s, phis, lams, Rhos, K, nT, nkeep, verbose));
    return rcpp_result_gen;
END_RCPP
}
// testfun
Rcpp::List testfun(const arma::mat& VSV, const arma::vec& vrtk, const int& j, const int& J, const int& iR, const int& iC, const double& ntk);
RcppExport SEXP _metapack_testfun(SEXP VSVSEXP, SEXP vrtkSEXP, SEXP jSEXP, SEXP JSEXP, SEXP iRSEXP, SEXP iCSEXP, SEXP ntkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type VSV(VSVSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vrtk(vrtkSEXP);
    Rcpp::traits::input_parameter< const int& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type iR(iRSEXP);
    Rcpp::traits::input_parameter< const int& >::type iC(iCSEXP);
    Rcpp::traits::input_parameter< const double& >::type ntk(ntkSEXP);
    rcpp_result_gen = Rcpp::wrap(testfun(VSV, vrtk, j, J, iR, iC, ntk));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_metapack_BMVMR_POCov", (DL_FUNC) &_metapack_BMVMR_POCov, 28},
    {"_metapack_BMVMR_POCovHMC", (DL_FUNC) &_metapack_BMVMR_POCovHMC, 29},
    {"_metapack_BayesNMR", (DL_FUNC) &_metapack_BayesNMR, 19},
    {"_metapack_calc_modelfit_dic", (DL_FUNC) &_metapack_calc_modelfit_dic, 16},
    {"_metapack_fmodel1", (DL_FUNC) &_metapack_fmodel1, 18},
    {"_metapack_fmodel2", (DL_FUNC) &_metapack_fmodel2, 19},
    {"_metapack_fmodel3", (DL_FUNC) &_metapack_fmodel3, 21},
    {"_metapack_fmodel4", (DL_FUNC) &_metapack_fmodel4, 22},
    {"_metapack_lpml_parcov", (DL_FUNC) &_metapack_lpml_parcov, 13},
    {"_metapack_dic_parcov", (DL_FUNC) &_metapack_dic_parcov, 13},
    {"_metapack_calc_modelfit_lpml", (DL_FUNC) &_metapack_calc_modelfit_lpml, 16},
    {"_metapack_testfun", (DL_FUNC) &_metapack_testfun, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_metapack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
