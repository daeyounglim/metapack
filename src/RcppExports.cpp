// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// BayesNMR
Rcpp::List BayesNMR(const arma::vec& y, const arma::vec& sd, const arma::mat& x, const arma::mat& z, const arma::uvec& ids, const arma::uvec& iarm, const arma::vec& npt, const double& nu, const double& c01_inv, const double& c02_inv, const double& a4, const double& b4, const double& a5, const double& b5, const int& K, const int& nT, const int& ndiscard, const int& nskip, const int& nkeep, const bool verbose, const arma::vec& theta_init, const arma::vec& phi_init, const arma::vec& sig2_init, const arma::mat& Rho_init, const double& lambda_stepsize, const double& phi_stepsize, const double& Rho_stepsize, const bool& sample_Rho, const bool& sample_df);
RcppExport SEXP _metapack_BayesNMR(SEXP ySEXP, SEXP sdSEXP, SEXP xSEXP, SEXP zSEXP, SEXP idsSEXP, SEXP iarmSEXP, SEXP nptSEXP, SEXP nuSEXP, SEXP c01_invSEXP, SEXP c02_invSEXP, SEXP a4SEXP, SEXP b4SEXP, SEXP a5SEXP, SEXP b5SEXP, SEXP KSEXP, SEXP nTSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP verboseSEXP, SEXP theta_initSEXP, SEXP phi_initSEXP, SEXP sig2_initSEXP, SEXP Rho_initSEXP, SEXP lambda_stepsizeSEXP, SEXP phi_stepsizeSEXP, SEXP Rho_stepsizeSEXP, SEXP sample_RhoSEXP, SEXP sample_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type iarm(iarmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type c01_inv(c01_invSEXP);
    Rcpp::traits::input_parameter< const double& >::type c02_inv(c02_invSEXP);
    Rcpp::traits::input_parameter< const double& >::type a4(a4SEXP);
    Rcpp::traits::input_parameter< const double& >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< const double& >::type a5(a5SEXP);
    Rcpp::traits::input_parameter< const double& >::type b5(b5SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi_init(phi_initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sig2_init(sig2_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Rho_init(Rho_initSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_stepsize(lambda_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi_stepsize(phi_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Rho_stepsize(Rho_stepsizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type sample_Rho(sample_RhoSEXP);
    Rcpp::traits::input_parameter< const bool& >::type sample_df(sample_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesNMR(y, sd, x, z, ids, iarm, npt, nu, c01_inv, c02_inv, a4, b4, a5, b5, K, nT, ndiscard, nskip, nkeep, verbose, theta_init, phi_init, sig2_init, Rho_init, lambda_stepsize, phi_stepsize, Rho_stepsize, sample_Rho, sample_df));
    return rcpp_result_gen;
END_RCPP
}
// calc_modelfit_dic
Rcpp::List calc_modelfit_dic(const arma::vec& y, const arma::mat& x, const arma::mat& z, const arma::uvec& ids, const arma::uvec& iarm, const arma::vec& npt, const arma::vec& dfs, const double& nu, const arma::mat& betas, const arma::mat& sig2s, const arma::mat& phis, const arma::mat& lams, const arma::cube& Rhos, const int& K, const int& nT, const int& nkeep, const bool& sample_df, const bool& verbose, const int& ncores);
RcppExport SEXP _metapack_calc_modelfit_dic(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP idsSEXP, SEXP iarmSEXP, SEXP nptSEXP, SEXP dfsSEXP, SEXP nuSEXP, SEXP betasSEXP, SEXP sig2sSEXP, SEXP phisSEXP, SEXP lamsSEXP, SEXP RhosSEXP, SEXP KSEXP, SEXP nTSEXP, SEXP nkeepSEXP, SEXP sample_dfSEXP, SEXP verboseSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type iarm(iarmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dfs(dfsSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig2s(sig2sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phis(phisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lams(lamsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Rhos(RhosSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool& >::type sample_df(sample_dfSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_modelfit_dic(y, x, z, ids, iarm, npt, dfs, nu, betas, sig2s, phis, lams, Rhos, K, nT, nkeep, sample_df, verbose, ncores));
    return rcpp_result_gen;
END_RCPP
}
// fmodel1
Rcpp::List fmodel1(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& a0, const double& b0, const arma::mat& Omega0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const bool& verbose);
RcppExport SEXP _metapack_fmodel1(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP Omega0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel1(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, a0, b0, Omega0, K, T, ndiscard, nskip, nkeep, theta_init, gamR_init, Omega_init, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel1p
Rcpp::List fmodel1p(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::uvec& Second, const arma::vec& Npt, const double& c0, const double& dj0, const double& a0, const double& b0, const arma::mat& Omega0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const bool& verbose);
RcppExport SEXP _metapack_fmodel1p(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP SecondSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP Omega0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Second(SecondSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel1p(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Second, Npt, c0, dj0, a0, b0, Omega0, K, T, ndiscard, nskip, nkeep, theta_init, gamR_init, Omega_init, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel2
Rcpp::List fmodel2(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& s0, const arma::mat& Omega0, const arma::mat& Sigma0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& R_stepsize, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const bool& verbose);
RcppExport SEXP _metapack_fmodel2(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP s0SEXP, SEXP Omega0SEXP, SEXP Sigma0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP R_stepsizeSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel2(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, s0, Omega0, Sigma0, K, T, ndiscard, nskip, nkeep, R_stepsize, theta_init, gamR_init, Omega_init, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel2p
Rcpp::List fmodel2p(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::uvec& Second, const arma::vec& Npt, const double& c0, const double& dj0, const double& s0, const arma::mat& Omega0, const arma::mat& Sigma0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& R_stepsize, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const bool& verbose);
RcppExport SEXP _metapack_fmodel2p(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP SecondSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP s0SEXP, SEXP Omega0SEXP, SEXP Sigma0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP R_stepsizeSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Second(SecondSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel2p(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Second, Npt, c0, dj0, s0, Omega0, Sigma0, K, T, ndiscard, nskip, nkeep, R_stepsize, theta_init, gamR_init, Omega_init, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel2p5
Rcpp::List fmodel2p5(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& s0, const arma::mat& Omega0, const arma::mat& Sigma0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& R_stepsize, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const bool& verbose);
RcppExport SEXP _metapack_fmodel2p5(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP s0SEXP, SEXP Omega0SEXP, SEXP Sigma0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP R_stepsizeSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel2p5(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, s0, Omega0, Sigma0, K, T, ndiscard, nskip, nkeep, R_stepsize, theta_init, gamR_init, Omega_init, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel2p5p
Rcpp::List fmodel2p5p(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::uvec& Second, const arma::vec& Npt, const double& c0, const double& dj0, const double& s0, const arma::mat& Omega0, const arma::mat& Sigma0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& R_stepsize, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const bool& verbose);
RcppExport SEXP _metapack_fmodel2p5p(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP SecondSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP s0SEXP, SEXP Omega0SEXP, SEXP Sigma0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP R_stepsizeSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Second(SecondSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel2p5p(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Second, Npt, c0, dj0, s0, Omega0, Sigma0, K, T, ndiscard, nskip, nkeep, R_stepsize, theta_init, gamR_init, Omega_init, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel3
Rcpp::List fmodel3(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& a0, const double& b0, const arma::mat& Omega0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& delta_stepsize, const double& Rho_stepsize, const double& R_stepsize, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const arma::mat& Rho_init, const bool& sample_Rho, const bool& verbose);
RcppExport SEXP _metapack_fmodel3(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP Omega0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP delta_stepsizeSEXP, SEXP Rho_stepsizeSEXP, SEXP R_stepsizeSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP Rho_initSEXP, SEXP sample_RhoSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_stepsize(delta_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Rho_stepsize(Rho_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Rho_init(Rho_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type sample_Rho(sample_RhoSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel3(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, a0, b0, Omega0, K, T, ndiscard, nskip, nkeep, delta_stepsize, Rho_stepsize, R_stepsize, theta_init, gamR_init, Omega_init, Rho_init, sample_Rho, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel3pp
Rcpp::List fmodel3pp(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::uvec& Second, const arma::vec& Npt, const double& c0, const double& dj0, const double& a0, const double& b0, const arma::mat& Omega0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& delta_stepsize, const double& Rho_stepsize, const double& R_stepsize, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const arma::mat& Rho_init, const bool& sample_Rho, const bool& verbose);
RcppExport SEXP _metapack_fmodel3pp(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP SecondSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP Omega0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP delta_stepsizeSEXP, SEXP Rho_stepsizeSEXP, SEXP R_stepsizeSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP Rho_initSEXP, SEXP sample_RhoSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Second(SecondSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_stepsize(delta_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Rho_stepsize(Rho_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Rho_init(Rho_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type sample_Rho(sample_RhoSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel3pp(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Second, Npt, c0, dj0, a0, b0, Omega0, K, T, ndiscard, nskip, nkeep, delta_stepsize, Rho_stepsize, R_stepsize, theta_init, gamR_init, Omega_init, Rho_init, sample_Rho, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel4
Rcpp::List fmodel4(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::vec& Npt, const double& c0, const double& dj0, const double& d0, const double& nu0, const arma::mat& Sigma0, const arma::mat& Omega0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& delta_stepsize, const double& Rho_stepsize, const double& R_stepsize, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const bool& verbose);
RcppExport SEXP _metapack_fmodel4(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP d0SEXP, SEXP nu0SEXP, SEXP Sigma0SEXP, SEXP Omega0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP delta_stepsizeSEXP, SEXP Rho_stepsizeSEXP, SEXP R_stepsizeSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< const double& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_stepsize(delta_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Rho_stepsize(Rho_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel4(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Npt, c0, dj0, d0, nu0, Sigma0, Omega0, K, T, ndiscard, nskip, nkeep, delta_stepsize, Rho_stepsize, R_stepsize, theta_init, gamR_init, Omega_init, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fmodel4p
Rcpp::List fmodel4p(const arma::mat& Outcome, const arma::mat& SD, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::uvec& Treat, const arma::uvec& Trial, const arma::uvec& Second, const arma::vec& Npt, const double& c0, const double& dj0, const double& d0, const double& nu0, const arma::mat& Sigma0, const arma::mat& Omega0, const int& K, const int& T, const int& ndiscard, const int& nskip, const int& nkeep, const double& delta_stepsize, const double& Rho_stepsize, const double& R_stepsize, const arma::vec& theta_init, const arma::mat& gamR_init, const arma::mat& Omega_init, const bool& verbose);
RcppExport SEXP _metapack_fmodel4p(SEXP OutcomeSEXP, SEXP SDSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP TreatSEXP, SEXP TrialSEXP, SEXP SecondSEXP, SEXP NptSEXP, SEXP c0SEXP, SEXP dj0SEXP, SEXP d0SEXP, SEXP nu0SEXP, SEXP Sigma0SEXP, SEXP Omega0SEXP, SEXP KSEXP, SEXP TSEXP, SEXP ndiscardSEXP, SEXP nskipSEXP, SEXP nkeepSEXP, SEXP delta_stepsizeSEXP, SEXP Rho_stepsizeSEXP, SEXP R_stepsizeSEXP, SEXP theta_initSEXP, SEXP gamR_initSEXP, SEXP Omega_initSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SD(SDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Trial(TrialSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Second(SecondSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dj0(dj0SEXP);
    Rcpp::traits::input_parameter< const double& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< const double& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega0(Omega0SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type ndiscard(ndiscardSEXP);
    Rcpp::traits::input_parameter< const int& >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_stepsize(delta_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Rho_stepsize(Rho_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type R_stepsize(R_stepsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamR_init(gamR_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_init(Omega_initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodel4p(Outcome, SD, XCovariate, WCovariate, Treat, Trial, Second, Npt, c0, dj0, d0, nu0, Sigma0, Omega0, K, T, ndiscard, nskip, nkeep, delta_stepsize, Rho_stepsize, R_stepsize, theta_init, gamR_init, Omega_init, verbose));
    return rcpp_result_gen;
END_RCPP
}
// lpml_parcov
Rcpp::List lpml_parcov(const arma::mat& Outcome, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::vec& Npt, const arma::cube& Sigma, const arma::cube& Omega, const arma::mat& theta, const arma::vec& thetahat, const arma::mat& Sigmahat, const arma::mat& Omegahat, const int& fmodel, const int& nkeep, const bool& verbose, const bool& grouped, const arma::uvec& Second, const int& ncores);
RcppExport SEXP _metapack_lpml_parcov(SEXP OutcomeSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP NptSEXP, SEXP SigmaSEXP, SEXP OmegaSEXP, SEXP thetaSEXP, SEXP thetahatSEXP, SEXP SigmahatSEXP, SEXP OmegahatSEXP, SEXP fmodelSEXP, SEXP nkeepSEXP, SEXP verboseSEXP, SEXP groupedSEXP, SEXP SecondSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetahat(thetahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigmahat(SigmahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omegahat(OmegahatSEXP);
    Rcpp::traits::input_parameter< const int& >::type fmodel(fmodelSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type grouped(groupedSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Second(SecondSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(lpml_parcov(Outcome, XCovariate, WCovariate, Npt, Sigma, Omega, theta, thetahat, Sigmahat, Omegahat, fmodel, nkeep, verbose, grouped, Second, ncores));
    return rcpp_result_gen;
END_RCPP
}
// dic_parcov
Rcpp::List dic_parcov(const arma::mat& Outcome, const arma::mat& XCovariate, const arma::mat& WCovariate, const arma::vec& Npt, const arma::cube& Sigma, const arma::cube& Omega, const arma::mat& theta, const arma::vec& thetahat, const arma::mat& Sigmahat, const arma::mat& Omegahat, const int& fmodel, const int& nkeep, const bool& verbose, const bool& grouped, const arma::uvec& Second, const int& ncores);
RcppExport SEXP _metapack_dic_parcov(SEXP OutcomeSEXP, SEXP XCovariateSEXP, SEXP WCovariateSEXP, SEXP NptSEXP, SEXP SigmaSEXP, SEXP OmegaSEXP, SEXP thetaSEXP, SEXP thetahatSEXP, SEXP SigmahatSEXP, SEXP OmegahatSEXP, SEXP fmodelSEXP, SEXP nkeepSEXP, SEXP verboseSEXP, SEXP groupedSEXP, SEXP SecondSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Outcome(OutcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XCovariate(XCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WCovariate(WCovariateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Npt(NptSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetahat(thetahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigmahat(SigmahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omegahat(OmegahatSEXP);
    Rcpp::traits::input_parameter< const int& >::type fmodel(fmodelSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type grouped(groupedSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Second(SecondSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(dic_parcov(Outcome, XCovariate, WCovariate, Npt, Sigma, Omega, theta, thetahat, Sigmahat, Omegahat, fmodel, nkeep, verbose, grouped, Second, ncores));
    return rcpp_result_gen;
END_RCPP
}
// vecr
arma::mat vecr(const arma::mat& X);
RcppExport SEXP _metapack_vecr(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(vecr(X));
    return rcpp_result_gen;
END_RCPP
}
// vecrinv
arma::mat vecrinv(const arma::vec& X, const int& J);
RcppExport SEXP _metapack_vecrinv(SEXP XSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(vecrinv(X, J));
    return rcpp_result_gen;
END_RCPP
}
// pRho_to_Rho
arma::mat pRho_to_Rho(arma::mat& pRho);
RcppExport SEXP _metapack_pRho_to_Rho(SEXP pRhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type pRho(pRhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pRho_to_Rho(pRho));
    return rcpp_result_gen;
END_RCPP
}
// Rho_to_pRho
arma::mat Rho_to_pRho(arma::mat& Rho);
RcppExport SEXP _metapack_Rho_to_pRho(SEXP RhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Rho(RhoSEXP);
    rcpp_result_gen = Rcpp::wrap(Rho_to_pRho(Rho));
    return rcpp_result_gen;
END_RCPP
}
// calc_modelfit_pearson
arma::mat calc_modelfit_pearson(const arma::vec& y, const arma::mat& x, const arma::mat& z, const arma::uvec& ids, const arma::uvec& iarm, const arma::vec& npt, const arma::mat& betas, const arma::mat& sig2s, const arma::mat& phis, const arma::mat& lams, const arma::cube& Rhos, const int& K, const int& nT, const int& nkeep, const bool& verbose, const int& ncores);
RcppExport SEXP _metapack_calc_modelfit_pearson(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP idsSEXP, SEXP iarmSEXP, SEXP nptSEXP, SEXP betasSEXP, SEXP sig2sSEXP, SEXP phisSEXP, SEXP lamsSEXP, SEXP RhosSEXP, SEXP KSEXP, SEXP nTSEXP, SEXP nkeepSEXP, SEXP verboseSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type iarm(iarmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig2s(sig2sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phis(phisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lams(lamsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Rhos(RhosSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_modelfit_pearson(y, x, z, ids, iarm, npt, betas, sig2s, phis, lams, Rhos, K, nT, nkeep, verbose, ncores));
    return rcpp_result_gen;
END_RCPP
}
// calc_modelfit_lpml
Rcpp::List calc_modelfit_lpml(const arma::vec& y, const arma::mat& x, const arma::mat& z, const arma::uvec& ids, const arma::uvec& iarm, const arma::vec& npt, const arma::vec& dfs, const double& nu, const arma::mat& betas, const arma::mat& sig2s, const arma::mat& phis, const arma::mat& lams, const arma::cube& Rhos, const int& K, const int& nT, const int& nkeep, const bool& sample_df, const bool& verbose, const int& ncores);
RcppExport SEXP _metapack_calc_modelfit_lpml(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP idsSEXP, SEXP iarmSEXP, SEXP nptSEXP, SEXP dfsSEXP, SEXP nuSEXP, SEXP betasSEXP, SEXP sig2sSEXP, SEXP phisSEXP, SEXP lamsSEXP, SEXP RhosSEXP, SEXP KSEXP, SEXP nTSEXP, SEXP nkeepSEXP, SEXP sample_dfSEXP, SEXP verboseSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type iarm(iarmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dfs(dfsSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig2s(sig2sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phis(phisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lams(lamsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Rhos(RhosSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< const int& >::type nkeep(nkeepSEXP);
    Rcpp::traits::input_parameter< const bool& >::type sample_df(sample_dfSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_modelfit_lpml(y, x, z, ids, iarm, npt, dfs, nu, betas, sig2s, phis, lams, Rhos, K, nT, nkeep, sample_df, verbose, ncores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_metapack_BayesNMR", (DL_FUNC) &_metapack_BayesNMR, 29},
    {"_metapack_calc_modelfit_dic", (DL_FUNC) &_metapack_calc_modelfit_dic, 19},
    {"_metapack_fmodel1", (DL_FUNC) &_metapack_fmodel1, 21},
    {"_metapack_fmodel1p", (DL_FUNC) &_metapack_fmodel1p, 22},
    {"_metapack_fmodel2", (DL_FUNC) &_metapack_fmodel2, 22},
    {"_metapack_fmodel2p", (DL_FUNC) &_metapack_fmodel2p, 23},
    {"_metapack_fmodel2p5", (DL_FUNC) &_metapack_fmodel2p5, 22},
    {"_metapack_fmodel2p5p", (DL_FUNC) &_metapack_fmodel2p5p, 23},
    {"_metapack_fmodel3", (DL_FUNC) &_metapack_fmodel3, 26},
    {"_metapack_fmodel3pp", (DL_FUNC) &_metapack_fmodel3pp, 27},
    {"_metapack_fmodel4", (DL_FUNC) &_metapack_fmodel4, 25},
    {"_metapack_fmodel4p", (DL_FUNC) &_metapack_fmodel4p, 26},
    {"_metapack_lpml_parcov", (DL_FUNC) &_metapack_lpml_parcov, 16},
    {"_metapack_dic_parcov", (DL_FUNC) &_metapack_dic_parcov, 16},
    {"_metapack_vecr", (DL_FUNC) &_metapack_vecr, 1},
    {"_metapack_vecrinv", (DL_FUNC) &_metapack_vecrinv, 2},
    {"_metapack_pRho_to_Rho", (DL_FUNC) &_metapack_pRho_to_Rho, 1},
    {"_metapack_Rho_to_pRho", (DL_FUNC) &_metapack_Rho_to_pRho, 1},
    {"_metapack_calc_modelfit_pearson", (DL_FUNC) &_metapack_calc_modelfit_pearson, 16},
    {"_metapack_calc_modelfit_lpml", (DL_FUNC) &_metapack_calc_modelfit_lpml, 19},
    {NULL, NULL, 0}
};

RcppExport void R_init_metapack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
